#!/bin/sh

#
# It is not necessary to use lua/luci for very simple web interfaces
# See http://wiki.openwrt.org/doc/howto/http.httpd
#

# Always need to send this header
echo "Content-type: text/html"
echo ""

echo "<html>
<head>"

# Bootstrap from CDN
echo '
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css">
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap-theme.min.css">
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css">
'

# jQuery and Bootstrap from CDN
echo '
<script src="http://code.jquery.com/jquery-2.0.3.min.js"></script>
<script src="//netdna.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.min.js"></script>
'

# Make cross-origin requests to any domain; https://github.com/TOMODOcom/TOMODOkorz - does not work for me
# echo '<script src="//tomodo-tools.s3.amazonaws.com/tomodo.korz-0.5.js"></script>'

# For centering (CSS) 
echo '
<style>
html, body{height:100%;margin:0;padding:0 0} 
.container-fluid{height:100%;display:table;width:100%;padding-right:0;padding-left: 0}   
.row-fluid{height:100%;display:table-cell;vertical-align:middle;width:100%}
.centering{float:none;margin:0 auto} 
</style>
'

# Some custom CSS
echo '
<style>
.station-icon{max-width:100px; max-height:100px; min-width:100px;}
</style>
'

echo '</head>
<body>
<div class="container theme-showcase">'

# For centering (begin)
echo '
<div class="container-fluid">
     <div class="row-fluid">
     <div class="offset3 span6 centering">'

echo "<center><h1>$(uci get system.@system[0].hostname) &infin;</h1></center>"

# A search field
echo '
<div class="container">
  <div class="row">
    <div class="col-sm-8 col-sm-offset-2">
      <form class="form-search">
          <div class="input-group">
              <input type="text" class="form-control" name="song" placeholder="Enter song name or mp3 URL">
              <span class="input-group-btn">
                  <button type="submit" class="btn btn-primary">&nbsp;<i class="fa fa-play"></i>&nbsp;</button>
              </span>
          </div>
      </form>
      <form class="form-search">
          <div class="input-group">
              <input type="text" class="form-control" name="q" placeholder="Enter station or podcast name">
              <span class="input-group-btn">
                  <button type="submit" class="btn btn-default">&nbsp;<i class="fa fa-play"></i>&nbsp;</button>
              </span>
          </div>
      </form>
    </div>
  </div>
</div>
'

# Some buttons
echo '
<center>
<div class="btn-group">
<a href="?next" class="btn btn-default btn-sm" role="button"><i class="fa fa-step-forward"></i> Next</a>
<a href="?pause" class="btn btn-default btn-sm" role="button"><i class="fa fa-pause"></i> Pause</a>
<a href="?continue" class="btn btn-default btn-sm" role="button"><i class="fa fa-play"></i> Continue</a>  
<a href="?mute" class="btn btn-default btn-sm" role="button"><i class="fa fa-volume-off"></i> Mute</a>
<a href="?unmute" class="btn btn-default btn-sm" role="button"><i class="fa fa-bullhorn"></i> Unmute</a>
<a href="?voldown" class="btn btn-default btn-sm" role="button">&nbsp;<i class="fa fa-volume-down"></i>&nbsp;</a>
<a href="?volup" class="btn btn-default btn-sm" role="button">&nbsp;<i class="fa fa-volume-up"></i>&nbsp;</a>
<a href="?radiostart" class="btn btn-default btn-sm" role="button">Start</a>
<a href="?radiostop" class="btn btn-default btn-sm" role="button">Stop</a>
<a href="?squeezestart" class="btn btn-default btn-sm" role="button">Squeeze</a></div>
<a href="?shairport" class="btn btn-default btn-sm" role="button">Shairport</a>
</div>
</center>
<p></p>
'

# One button per station
echo '<center>'
echo '<a href="?browse=">Regional</a> | '
STATIONS=$(uci show radio | grep "=station" | cut -d "=" -f 1 | cut -d "." -f 2)
COUNTER=0
for STATION in $STATIONS
do
  let COUNTER=COUNTER+1 
  echo " <a href=\"?station="$COUNTER"\">"$STATION"</a> |"
done
echo '</center>'

# Some debug output
# echo "<pre>"
# env
# echo "</pre>"


# Now for some favorite songs (TODO: Move to some editable settings)
echo "<center>"
for SONG in "sunchyme" "orinoco flow" "toto africa" "wedding rain liz story" \
"janelle monae we are young" "melanie thornton wonderful dream" \
"reamonn moments like this" "petersburg sleigh ride" "rafferty baker street" \
"bolero ravel" "Tamee Harrison" ; do
  echo '<a href="?song='$SONG'">'$SONG'</a> | '
done
echo '<a href="?song=http://www.einstein-website.de/z_biography/einstein1930.mp3">Einstein</a>'

echo '<p></p>'
echo '<p><a class="btn btn-default btn-sm" role="button" href="/cgi-bin/luci/">Settings</a></p>'
echo '<p><a href="https://github.com/probonopd/" target="_blank"><i class="fa fa-github"></i> Fork me on Github</a></p>'
echo "</center>"

echo '</div>'

# For centering (end)
echo '
         </div>
    </div>
 </div>
'

echo "</body>"
echo "</html>"

# Here we do the actual work

STRING=$(echo $REQUEST_URI | cut -d "?" -f 2 | cut -d "=" -f 1)

#
# RadioTime API is documented on 
# https://github.com/brianhornsby/plugin.audio.tuneinradio/wiki/RadioTime-API-Methods
# Appending "&render=json" would give JSON instead
# which might be useful for client-side processing
#
# This is for debugging only. Obtain and use your own Partner ID for production
PARTNER_ID=$(echo 376H12y5z23q2u918m5722N7X11 |  sed "s/[[:digit:].-]//g")
# Derive a serial number from the MAC address of eth0. Useful for presets
SERIAL=$(ifconfig | grep eth0 | grep "HWaddr" | cut -d " " -f 11 | md5sum | sed "s/[[:alpha:].-]//g")
#

# Given a radiotime.com station ID, play the stream
if [ "$STRING" == "radiotime" ] ; then
  ID=$(echo $REQUEST_URI | cut -d "?" -f 2 | cut -d "=" -f 2)
  URL="http://opml.radiotime.com/Tune.ashx?id=$ID&formats=mp3&partnerId=$PARTNER_ID&serial=$SERIAL"
  # echo $URL
  STREAM=$(wget "$URL" -U "" -O - -q | grep "http" | head -n 1)
  echo $STREAM
  # If the STREAM URL is a m3u, try to get the first http line
  ENDING=$(echo $STREAM| awk '{ print substr($0, length($0)-3, length($0))}')
  if [ "$ENDING" == ".m3u" ] ; then
    STREAM=$(wget "$STREAM" -U "" -O - -q | grep http | cut -d "=" -f 2 | head -n 1)
    echo $STREAM
  fi
  # If the STREAM URL is a pls, try to get the first http line
  ENDING=$(echo $STREAM| awk '{ print substr($0, length($0)-3, length($0))}')
  if [ "$ENDING" == ".pls" ] ; then         
    STREAM=$(wget "$STREAM" -U "" -O - -q | grep http | cut -d "=" -f 2 | head -n 1)  
    echo $STREAM
  fi
  # uci delete radio.ONCE
  RAND=$(tr -cd 0-9 </dev/urandom | head -c 3)
  uci set radio.ONCE$RAND=playonce
  uci set radio.ONCE$RAND.url="$STREAM"
  uci set radio.ONCE$RAND.type=mp3
  killall madplay
fi

# Search radiotime.com
if [ "$STRING" == "q" ] ; then
  Q=$(echo $REQUEST_URI | cut -d "?" -f 2 | cut -d "=" -f 2)
  REQUEST_URI="?browse=http://opml.radiotime.com/Search.ashx?query=$Q&formats=mp3&partnerId=$PARTNER_ID&serial=$SERIAL"
  STRING="browse"
fi

# Browse radiotime.com podcast for episodes
if [ "$STRING" == "pbrowse" ] ; then
  ID=$(echo $REQUEST_URI | cut -d "?" -f 2 | cut -d "=" -f 2)
  REQUEST_URI="?browse=http://opml.radiotime.com/Tune.ashx?c=pbrowse&id=$ID&flatten=true&formats=mp3&partnerId=$PARTNER_ID&serial=$SERIAL"
  STRING="browse"
fi

# Show radiotime.com stations or podcasts based on a query, or just the local ones
if [ "$STRING" == "browse" ] ; then
  URL1=$(echo $REQUEST_URI | cut -d "?" -f 2 | cut -d "=" -f 2)
  URL2=$(echo $REQUEST_URI | cut -d "?" -f 3)
  URL="$URL1?$URL2"
  # echo $URL
  if [ "$URL" == "?" ] ; then
    URL="http://opml.radiotime.com/Browse.ashx?c=local&formats=mp3&partnerId=$PARTNER_ID&serial=$SERIAL"
    if [ ! -e /tmp/local.xml ] ; then
      echo "Downloading..."
      wget "$URL" -U "" -O - -q  > /tmp/local.xml
    fi
    OPML=$(cat /tmp/local.xml)
  else
    OPML=$(wget "$URL" -U "" -O - -q)
  fi
  # echo $OPML
  # I am replacing blanks with + so that sh word handing does not get confused
  OUTLINES=$(echo "$OPML" | sed -e "s/ /+/g" | grep -o -e '<outline.*/>')
  # echo $OUTLINES
  for OUTLINE in $OUTLINES; do
    ITEM=$(echo "$OUTLINE" | sed -e "s/+/ /g")
    URL=$(echo "$ITEM" | cut -d '"' -f 6 | cut -d "=" -f 2) ### This is not very clean; TODO: clean URL based on s/p/t type
    ID=$(echo "$ITEM" | grep -o "guide_id=.*\<" | cut -d '"' -f 2)
    TYPE=$(echo $ID | head -c 1) # s = station, p = podcast, t = episode
    NAME=$(echo "$ITEM" | cut -d '"' -f 4)
    ICON=$(echo "$ITEM" | grep -o "image=.*\<" | cut -d '"' -f 2)
    if [ "$TYPE" == "p" ] ; then
      echo '<br><a href="?pbrowse='$ID'"><img class="station-icon" src="'$ICON'"> '$NAME'</a>'     
    else
      echo '<br><a href="?radiotime='$URL'&name='$NAME'"><img class="station-icon" src="'$ICON'"> '$NAME'</a>'
    fi
  done
fi

if [ "$STRING" == "play" ] ; then
  URL=$(echo $REQUEST_URI | cut -d "?" -f 2 | cut -d "=" -f 2)
  # If the URL is a m3u, try to get the first mp3 line
  ENDING=$(echo $URL| awk '{ print substr($0, length($0)-3, length($0))}')
  if [ "$ENDING" == ".m3u" ] ; then
    URL=$(wget "$URL" -U "" -O - -q | grep http | cut -d "=" -f 2)
  fi
  # The following does not work yet since set radio.ONCE.url errors out
  # echo $URL
  # uci delete radio.ONCE
  # uci set radio.ONCE=playonce
  # uci set radio.ONCE.url=$URL 2>&1
  # uci set radio.ONCE.type=mp3
  # killall madplay
fi

if [ "$STRING" == "song" ] ; then
  SONG=$(echo $REQUEST_URI | cut -d "?" -f 2 | cut -d "=" -f 2)
  ENDING=$(echo $SONG| awk '{ print substr($0, length($0)-3, length($0))}')
  if [ "$ENDING" == ".mp3" ] ; then
    # uci delete radio.ONCE
    RAND=$(tr -cd 0-9 </dev/urandom | head -c 3)
    uci set radio.ONCE$RAND=playonce
    # We urldecode the song, since it is an URL which otherwise does not play
    SONG=$(printf $(echo "$SONG" | sed -e '1! d' -e 's/%/\\x/g'))
    uci set radio.ONCE$RAND.url="$SONG"
    uci set radio.ONCE$RAND.type=mp3
  else
    # We leave the song urlencoded, since it is input that way into a seach engine
    # uci delete radio.ONCE
    RAND=$(tr -cd 0-9 </dev/urandom | head -c 3)
    uci set radio.ONCE$RAND=playonce
    uci set radio.ONCE$RAND.title="$SONG" # This is DANGEROUS, what if some random rubbish is passed in?
    uci set radio.ONCE$RAND.type=song
  fi
  killall madplay
fi

if [ "$STRING" == "station" ] ; then
  NEXT=$(echo $REQUEST_URI | cut -d "?" -f 2 | cut -d "=" -f 2)
  uci set radio.next=$NEXT # This is DANGEROUS, what if some random rubbish is passed in?
  echo $NEXT
  killall madplay
fi

if [ "$STRING" == "volume" ] ; then
  SPEAKER=$(amixer scontrols | head -n 1 | cut -d "'" -f 2)  
  VOLUME=$(echo $REQUEST_URI | cut -d "?" -f 2 | cut -d "=" -f 2)
  amixer sset $SPEAKER $VOLUME% # This is DANGEROUS, what if some random rubbish is passed in?
fi

if [ "$STRING" == "voldown" ] ; then
  SPEAKER=$(amixer scontrols | head -n 1 | cut -d "'" -f 2)
  amixer set $SPEAKER 2dB-
fi

if [ "$STRING" == "volup" ] ; then
  SPEAKER=$(amixer scontrols | head -n 1 | cut -d "'" -f 2)
  amixer set $SPEAKER 2dB+
fi   

if [ "$QUERY_STRING" == "mute" ] ; then
  SPEAKER=$(amixer scontrols | head -n 1 | cut -d "'" -f 2)  
  amixer sset $SPEAKER '1%'
fi

if [ "$QUERY_STRING" == "unmute" ] ; then
  SPEAKER=$(amixer scontrols | head -n 1 | cut -d "'" -f 2)
  amixer sset $SPEAKER '60%'
fi       

if [ "$QUERY_STRING" == "next" ] ; then
  uci set radio.next=$(($(uci get radio.next)+1))
  killall madplay
fi

if [ "$QUERY_STRING" == "pause" ] ; then
  kill -SIGSTOP $(pidof madplay)
fi

if [ "$QUERY_STRING" == "continue" ] ; then
  kill -SIGCONT $(pidof madplay)
fi

if [ "$QUERY_STRING" == "radiostart" ] ; then
  /etc/init.d/squeezelite stop
  killall shairport-sync
  /etc/init.d/radio start
fi

if [ "$QUERY_STRING" == "radiostop" ] ; then
  /etc/init.d/squeezelite stop
  /etc/init.d/radio stop
  killall madplay wget
  killall shairport-sync
fi

if [ "$QUERY_STRING" == "squeezestart" ] ; then
  /etc/init.d/radio stop
  killall madplay wget
  killall shairport-sync
  # FIXME: STARTING IT MANUALLY SINCE THE /etc/init.d SCRIPT DOES NOT WORK
    cd /tmp
    ls ./squeezelite-mips-ar71xx >/dev/null 2>&1 || wget http://squeezelite.googlecode.com/files/squeezelite-mips-ar71xx
    chmod a+x ./squeezelite-mips-ar71xx
    # FIXME: Strangely the following works ONLY with -d and ONLY without -z 
    ./squeezelite-mips-ar71xx -n $(uci get system.@system[0].hostname) -d all=info -m xx:xx:xx:xx:xx:xx -s mysqueezebox.com 
    cd 
fi

# There is not enough space to save the software on the device, but we can load it at runtime
if [ "$QUERY_STRING" == "shairport" ] ; then
  if [ ! -d /tmp/shairport-sync ] ; then
    mkdir /tmp/shairport-sync
    cd /tmp/shairport-sync
    FILES=$(wget -q "http://irmagic.carina.uberspace.de/openwrt/binaries/shairport-sync/Packages" -O - | grep "Filename: ")
    for FILE in $FILES ; do
      wget "http://irmagic.carina.uberspace.de/openwrt/binaries/shairport-sync/$FILE"
      tar zxpvf "$FILE"
      tar zxpvf ./data.tar.gz
      rm "$FILE"
    done
    cd usr/lib/
    wget "http://irmagic.carina.uberspace.de/openwrt/binaries/shairport-sync/libssl.so.1.0.0"
    wget "http://irmagic.carina.uberspace.de/openwrt/binaries/shairport-sync/libcrypto.so.1.0.0"
    cd -
  fi
  killall wget
  /etc/init.d/radio stop
  cd /tmp/shairport-sync/
  export LD_LIBRARY_PATH=./usr/lib/
  ./usr/bin/shairport-sync -d -a $(uci get system.@system[0].hostname)
fi
