#!/bin/sh

# This sets the exit status $? of a pipe to to the exit code of the 
# last program to exit non-zero (or zero if all exited successfully)
set -o pipefail

# Initialize
uci get radio.next || uci set radio.next=1

#####

# Wait until we have Internet
while true; do
  ping -c1 google.com && break
  sleep 1
done

#####

nr_to_name()
{
  NUMBER_OF_STATIONS=$(uci show radio | grep -e "=station$" | wc -l)
  if [ $1 -lt 1 ] ; then
    uci set radio.next=$NUMBER_OF_STATIONS # if 0 or negative then we set to the highest station
    echo $(uci show radio | grep -e "=station$" | cut -d "." -f 2 | cut -d "=" -f 1 | head -n $1 | tail -n 1)
  elif [ $1 -le $NUMBER_OF_STATIONS ] ; then
    echo $(uci show radio | grep -e "=station$" | cut -d "." -f 2 | cut -d "=" -f 1 | head -n $1 | tail -n 1)
  else
    uci set radio.next=1 # Reset
    echo $(uci show radio | grep -e "=station$" | cut -d "." -f 2 | cut -d "=" -f 1 | head -n 1 | tail -n 1) # 1st
  fi
}

name_to_nr()
{
  STATIONS=$(uci show radio | grep -e "=station$")
  i=0
  for STATION in $STATIONS ; do
    i=$((i+1))
    STA=$(echo $STATION | cut -d "." -f 2 | cut -d "=" -f 1)
    if [ "$STA" == "$1" ] ; then
      echo $i
    fi
  done
}


# nr_to_name 3
# name_to_nr $(nr_to_name 2)

####################

# Let the /etc/init.d script handle this, so that we can restart
# the radioplayer using arduinolisten
# trap "killall -9 arduinolisten ; kill $$" SIGINT # also ctrl-D
# trap "killall -9 arduinolisten ; kill $$" EXIT # also killall?
#
# Optionally, launch the Arduino handler that reacts to commands sent from the Arduino
# /usr/bin/arduinolisten &
# echo $! > /tmp/process_arduinolisten.pid

SPEAKER=$(amixer scontrols | head -n 1 | cut -d "'" -f 2)
amixer sset $SPEAKER '60%' || exit 1

# Play station IDs and in parallel launch stream with an overlap

play()
{
  # SUCCEEDED=0
  URL=$(echo $1 | sed -e 's|https://|http://|g' ) # e.g., Netzpolitik needs this

  # If the URL is a m3u, try to get the first mp3 line
  ENDING=$(echo $URL| awk '{ print substr($0, length($0)-3, length($0))}')
  if [ "$ENDING" == ".m3u" ] ; then
    URL=$(wget "$URL"  -O - -q | grep mp3 | cut -d "=" -f 2)
  fi

  wget -U "" "$URL" -O - | madplay --fade-in=3 -o wave:- - 2>/tmp/madplay.out | aplay -Dplug:dmix
  # if [ $? -eq 0 ]; then
  #   SUCCEEDED=1
  # fi
}

overlay()
{
  wget -U "" "$1" -O - | madplay --fade-in=0.5 -o wave:- - | aplay -Dplug:dmix &
}

id()
{
   /usr/bin/speak $1 $2
}

podcast()
{
  URL=$(wget -U "" "$1" -O - | grep "enclosure url.*mp3" | head -n 1 | grep -o -e "enclosure url.*\"" | cut -d '"' -f 2 | sed -e 's|https://|http://|g')
  echo $URL
  wget -U "" "$URL" -O - | madplay --fade-in=3 -o wave:- - 2>/tmp/madplay.out | aplay -Dplug:dmix 
  if [ $? -eq 0 ]; then
    # Only store lasturl value if listened all the way until the end
    # and thus got exitcode 0
    uci set radio.$2.lasturl="$URL" && uci commit
  fi
}

playlist()
{
  play $(wget -U "" "$1" -O - | grep http | head -n 1 | cut -d "=" -f 2)
}

dilandau()
{
  SEARCH=$(echo $1 | sed -e 's| |%20|g')
  echo $SEARCH
  URL=$(wget "http://pleer.com/mobile/search?q=$SEARCH" -O - | grep download | grep -Eo "http.*?mp3" | head -n 1)
  play "$URL"
}

playonce()
{
  # Check if we have something scheduled to be played once
  # if so, play it now
  PLAYONCE=""
  PLAYONCE=$(uci show radio | grep -e "=playonce$" | cut -d "." -f 2 | cut -d "=" -f 1 | head -n 1 | tail -n 1)
  if [ "" != "$PLAYONCE" ] ; then
    # SUCCEEDED=0
    TYPE=$(uci get radio.$PLAYONCE.type)
    if [ "$TYPE" == "song" ] ; then
      dilandau "$(uci get radio.$PLAYONCE.title)"
    else
      play $(uci get radio.$PLAYONCE.url)
    fi
    # if [ "$SUCCEEDED" == "1" ] ; then
    uci delete radio.$PLAYONCE
    continue # exit the current for loop # TODO: APPARENTLY THIS DOES NOT WORK FROM INSIDE A FUNCTION ###################
    # THIS IS WHY WE CANNOT PLAY TWO PLAYONCE INSTANCES AT ONCE. WE NEED TO DO AN IF PLAYONCE THEN PLAYONCE ELSE PLAY NORMAL
    # uci commit
    # fi
  fi
}

play_next()
{
  # If we have playonce instances, play the first of them
  playonce

  # Find out what station number to play
  NEXTNUM=$(uci get radio.next)
  # Play station ID
  STATION=$(nr_to_name $NEXTNUM)
  SIDTYPE=$(uci get radio.$STATION.sidtype)
  if [ "$SIDTYPE" == "jingle" ] ; then
    overlay $(uci get radio.$STATION.sidurl)
  else
    id $(uci get radio.$STATION.lang) $(uci get radio.$STATION.speakname | sed -e 's|\ |+|g')
  fi  
  # Play station
  TYPE=$(uci get radio.$STATION.type)
  if [ "$TYPE" == "mp3" ] ; then
    play $(uci get radio.$STATION.url)
  elif [ "$TYPE" == "pls" ] ; then
    playlist $(uci get radio.$STATION.url)
  elif [ "$TYPE" == "rss" ] ; then
    podcast $(uci get radio.$STATION.url) $STATION
  else
    echo type $TYPE to be handled
  fi
#  NEXTNUMNOW=$(uci get radio.next)
#  if [ "$NEXTNUMNOW" == "$NEXTNUM" ] ; then
#    # If next has not been changed by an external script, then we increase it
#    echo "*** INCREASING ***"
#    uci set radio.next=$((NEXTNUM+1)) # Set but do not write to disk 
#  fi
}

# Play startup sound
play http://irmagic.carina.uberspace.de/radio/startup.mp3

# Speak own IP address
# speak "$(ifconfig  | grep "inet addr" | head -n 1 | cut -d ":" -f 2 | cut -d " " -f 1 | sed 's/\(.\)/\1 /g' | sed 's/\./,, punkt ,,/g')"

# Infinite loop
while true; do
  play_next
done
