#!/bin/sh
# This assumes a sketch on the Arduino on ttyATH0 that outputs hashes like 7354AEB4

# GPIO 29 is on "pin" R17-S (south end of resistor 17)
# This is connected to the Arudino reset pin, hence we need to change it from "grounded" to "isolated"
# so that the Arduino can start running
echo 29 > /sys/class/gpio/export
echo out > /sys/class/gpio/gpio29/direction
echo 1 > /sys/class/gpio/gpio29/value # isolated
 
stty -F /dev/ttyATH0 cs8 57600 ignbrk -brkint -icrnl -imaxbel -opost -onlcr -isig -icanon -iexten -echo -echoe -echok -echoctl -echoke noflsh -ixon -crtscts
 
SPEAKER=$(amixer scontrols | head -n 1 | cut -d "'" -f 2)
LAST=0

volume()
{
  if [ "$1" == "up" ] ; then
    amixer set "$SPEAKER" 2dB+
  fi
  if [ "$1" == "down" ] ; then
    amixer set "$SPEAKER" 2dB-
  fi
}

while read LINE; do
  LINE=$(echo $LINE | sed -e 's|\n||g' | sed -e 's|\r||g' | sed -e 's|\l||g' )
  LENGTH=$(echo "$LINE" | wc -m)
  if [ "$LENGTH" == "9" ] ; then
    echo $LINE
    THISTIME=$(date +"%s")
    COMMAND=$(uci get radio.$LINE.command)
    echo $COMMAND
    REPEATABLE=$(uci get radio.$LINE.repeat)
    echo $REPEATABLE
    if [ "$LASTCOMMAND" == "$COMMAND" ] ; then
      echo "REPEAT"
      if [ "$REPEATABLE" == "1" ] ; then
        eval $COMMAND
      else
        if [ $THISTIME -ge $((LASTTIME+2)) ] ; then # At least 2 seconds between repeats
          eval $COMMAND
        else
          echo "REJECTED THIS REPEAT"
        fi
      fi
    else
      eval $COMMAND
    fi
  LASTCOMMAND=$COMMAND
  LASTTIME=$THISTIME
  fi

done < /dev/ttyATH0
